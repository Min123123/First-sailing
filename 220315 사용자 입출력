# <사용자 입력과 출력>

# Input : 입력되는 모든 것을 문자열로 취급한다.

number = input("숫자를 입력하세요 : ")
print(number) # 여기서 number는 숫자가 아닌 문자열이다. 



# Print문 자세히!

# 큰따옴표(")로 둘러싸인 문자열은 + 연산과 동일하다

for i in range(10):
    print(i) # 보통 이런식으로 여러 줄로 나오지만,

for i in range(10):
    print(i,end='a') # 매개변수 end를 이용해 끝 문자(띄어쓰기)를 지정하면 결괏값을 한 줄로 출력할 수 있다.
# 예를 들어 end='a'로 지정을 하면, 0a1a ...처럼 끝에 a를 붙여준다.


# 파일 읽고 쓰기

f = open("새파일.txt", 'w', encoding = 'UTF-8') # encoding = UTF - 8을 넣어주면 한글이 깨지지 않음.
for i in range(1,11):
    data = "%d번째 줄입니다. \n" % i # 1에서 10번째 줄까지 출력하겠다!
    f.write(data)
f.close()

for i in range(1,11):
    data = "%d번째 줄입니다. \n" % i
print(data)


# readline 읽기 함수


# 한 줄씩 읽기
f = open("새파일.txt", 'r', encoding = 'UTF-8') # 지정한 파일에 있는 가장 첫번째 줄을 출력한다.
line = f.readline()
print(line)
f.close()

# 여러줄씩 읽기 while 반복문 활용

f = open("새파일.txt", 'r', encoding = 'UTF-8')
while True: # 무한반복!
    line = f.readline() # readline으로 첫 번째 줄만을 가져온다.
    if not line: break # 더 이상 라인이 없을 때, break 문을 통해 빠져나온다.
    print(line, strip()) # end=""를 사용해서 한 줄 띄우는 것을 막는다.
f.close()



# readlines 함수 - 파일의 모든 줄을 읽어서 각각의 줄을 요소로 갖는 리스트로 돌려준다.
f = open("C:/doit/새파일.txt", 'r')
lines = f.readlines()
for line in lines:
    print(line)
f.close()



# read 함수 사용하기 - 모든 것을 읽어온다.

f = open("새파일.txt", 'r', encoding = 'UTF-8')
date = f.read()
print(data)
f.close()


# 파일에 새로운 내용 추가하기

f = open("새파일.txt",'a') # a(add)로 새로운 내용을 기존의 내용에 추가한다.
for i in range(11,20):
    data = ("%d번째 줄입니다.\n" %i)
    f.write(data)
f.close()


# with문과 함께 사용하기

with open("foo.txt", "w") as f: # open("foo.txt", "w")이라는 파일을 연 후, f라는 변수에 저장한다는 뜻!
    f.write("Life is too short, you need python") # w, 즉 쓰기모드이므로 기존의 내용을 제거하고 새로 추가한다.

# ==> with를 사용하면 f.close()를 따로 하지않아도 되는데, 그 이유는 with 함수이기 때문에 with 함수 내에 있는 f는 함수 밖으로 나가면 효력이 없다. 그렇기에 f.close가 의미가 없다는 것!












