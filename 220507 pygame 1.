import pygame 
#####################################################################################
# 기본 초기화(필수)

pygame.init() # 초기화(반드시 필요)

# 화면 크기 설정
screen_width = 480 # 너비(가로) 
screen_height = 640 # 높이(세로)
screen = pygame.display.set_mode((screen_width,screen_height))

# 화면 타이틀 설정
pygame.display.set_caption("My First Game") # 게임 이름

# FPS
clock = pygame.time.Clock()
###############################################################################################


# 1. 사용자 게임 초기화(배경 화면, 게임 이미지, 좌표, 폰트, 좌표 등)

# 배경 이미지 불러오기
background = pygame.image.load("C:/Users/alsto/OneDrive/바탕 화면/PythonWorkplace/pygame_basic/background/제목 없음.png")


# 캐릭터(스프라이트) 불러오기

character = pygame.image.load("C:/Users/alsto/OneDrive/바탕 화면/PythonWorkplace/pygame_basic/background/character.png")
character_size = character.get_rect().size # 이미지의 크기를 구해옴
character_width = character_size[0] # 캐릭터의 가로크기
character_height = character_size[1] # 캐릭터의 세로크기
character_x_pos = (screen_width / 2) - (character_width / 2)   # 화면 가로의 절반 크기에 해당하는 곳에 위치하도록 (가로 위치)
character_y_pos = screen_height - character_height  # 화면 세로의 가장 아래에 위치하도록 (세로 위치)


# 이동할 좌표
to_x = 0
to_y = 0

# 이동 속도
character_speed = 0.6


# enemy character
enemy = pygame.image.load("C:/Users/alsto/OneDrive/바탕 화면/PythonWorkplace/pygame_basic/background/enemy.png")
enemy_size = enemy.get_rect().size # 이미지의 크기를 구해옴
enemy_width = enemy_size[0] # 캐릭터의 가로크기
enemy_height = enemy_size[1] # 캐릭터의 세로크기
enemy_x_pos = (screen_width / 2) - (enemy_width / 2)   # 화면 가로의 절반 크기에 해당하는 곳에 위치하도록 (가로 위치)
enemy_y_pos = (screen_height / 2) - (enemy_height / 2)  # 화면 세로의 가장 아래에 위치하도록 (세로 위치)


# 폰트 정의
game_font = pygame.font.Font(None,40) # 폰트 객체 생성 (폰트, 크기), None은 기본 폰트

# 총 시간
total_time = 10

# 시작 시간
start_ticks = pygame.time.get_ticks() # 현재 tick 정보를 받아옴.





# 이벤트 루프

# 키보드를 눌렀을 때 

running = True # 게임이 진행중인가? 
while running: # 게임이 진행되고 있는 도중,
    dt = clock.tick(60) # 게임화면의 초당 프레임 수(FPS) 설정

    # 캐릭터가 100만큼 이동해야 함
    # 10 fps : 1초 동안에 10번 동작 -> 1번에 10만큼 이동
    # 20 fps : 1초 동안에 20번 동작 -> 1번에 5만큼 이동!


    # print("fps : " + str(clock.get_fps())) # fps값을 추출함(참고)

    # 2. 이벤트 처리(키보드, 마우스 등)
    for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생했는가?
            running = False # 게임이 진행중이 아님
        if event.type == pygame.KEYDOWN: # 키가 눌러졌는지 확인
            if event.key == pygame.K_LEFT: # 캐릭터를 왼쪽으로
                to_x -= character_speed 
            elif event.key == pygame.K_RIGHT: # 캐릭터를 오른쪽으로
                to_x += character_speed
            elif event.key == pygame.K_UP: # 캐릭터를 위쪽으로
                to_y -= character_speed
            elif event.key == pygame.K_DOWN: # 캐릭터를 아래쪽으로
                to_y += character_speed
        
        # 키보드에서 손을 떼면 멈추는 이벤트 생성
        if event.type == pygame.KEYUP: # 방향키를 떼면 멈춤
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT: # 왼쪽이나 오른쪽 방향키를 누르고 있다가 뗄 경우 원위치 시킴.
                to_x = 0
            elif event.key == pygame.K_UP or event.key == pygame.K_DOWN:
                to_y = 0

    # 3. 게임 캐릭터 위치 정의
    character_x_pos += to_x * dt # 프레임별로 바뀌는 값을 설정
    character_y_pos += to_y * dt


    # 캐릭터가 화면 밖을 벗어나지 않도록 조정
    # 가로 경계값 처리
    if character_x_pos < 0: # 왼쪽 끝에 있을 때
        character_x_pos = 0
    elif character_x_pos > screen_width - character_width: # 오른쪽 끝에 있을 때
        character_x_pos = screen_width - character_width

    # 세로 경계값 처리
    if character_y_pos < 0: # 위쪽 끝에 있을 때
        character_y_pos = 0
    elif character_y_pos > screen_height - character_height: # 아래쪽 끝에 있을 때
        character_y_pos = screen_height - character_height



    # 4. 충동 처리
    # collision 처리
    character_rect = character.get_rect() # 캐릭터가 가지는 rect 정보 가져옴
    character_rect.left = character_x_pos
    character_rect.top = character_y_pos

    enemy_rect = enemy.get_rect()
    enemy_rect.left = enemy_x_pos
    enemy_rect.top = enemy_y_pos

    # collision 체크
    if character_rect.colliderect(enemy_rect): # 캐릭터와 적이 충돌했는지?
        print("충돌!")
        running = False


    # 화면에 그리기
    
    screen.blit(background, (0,0)) # 배경 이미지를 실제로 그림 blit
    screen.blit(character, (character_x_pos, character_y_pos)) # 캐릭터의 위치를 조정하기 위해 약간의 계산 과정이 필요함.
    screen.blit(enemy,(enemy_x_pos,enemy_y_pos)) # 적 그리기

    # 타이머 집어넣기
    # 경과 시간 계산

    elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000 # 경과 시간을 1000으로 나누어 초 단위로 표시함

    timer = game_font.render(str(int(total_time - elapsed_time)), True, (255, 255, 255))
    # 출력할 글자, True, 글자 색상
    screen.blit(timer, (10,10))

    # 시간이 0이 되면 게임 종료
    if total_time - elapsed_time <= 0:
        print("시간 종료!")
        running = False

    # 종료 직전 잠시 대기
    pygame.time.delay(2000) # 2초 정도 대기
    

    pygame.display.update() # 게임 화면을 다시 그리기 (필수)



# pygame 종료
pygame.quit()



