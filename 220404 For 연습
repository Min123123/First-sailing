for i in [1,2,3,4,5,6,7,8,9,10]:
    print(i)

# range 함수

# range 1, 파라미터 2개를 받는 경우

#for i in range(start, stop): # start부터 stop까지의 범위
    #print(i)

for i in range(3,11): # 3부터 10까지 출력함.
    print(i)

# range 2, 파라미터 1개를 받는 경우

# for i in range(stop): # 0부터 stop까지의 범위.
    # print(i)

for i in range(10): # 0부터 9까지 출력
    print(i)

# range 3, 파라미터 3개를 받는 경우   

# for i in range(start, stop, step): # start부터 stop -1 까지의 범위, 그리고 간격
    # print(i)

for i in range(3,17,3): # 3부터 16까지 출력, 3씩 간격이 주어진다.
    print(i)
# 3 6 9 12 15 출력



numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31] # 총 11개의 요솟값

# 인덱스 출력

for i in range(len(numbers)): # 0부터 range(numbers), 즉 11 - 1까지의 범위를 출력한다. 즉 인덱스가 출력된다.
    print(i,numbers[i])



# 2의 n제곱을 출력하는 프로그램

# 거듭제곱을 표현하려면 **을 사용함.

for i in range(11):
    print("{}^{} = {}".format(2,i,2**i)) # 포매팅 사용!


# 구구단(중첩 for문)

# 2개의 변수가 필요함 => 2개의 변수를 정의해야 함.

i = 1 
for i in range(1,10):
    for j in range(1,10):
        print("{} * {} = {}".format(i,j,j*i))

    

# a + b + c = 400
# a < b < c

for a in range(1,400):
    for b in range(1,400):
        for c in range(1,400):
            if a*a + b*b == c*c and a < b < c:
                print(a * b * c)
# ==> 틀린 코드는 아니지만 비효율적인 코드.


# c = 400 - b - a

for a in range(1,400): 
    for b in range(1,400):
        c = 400 - a - b # a와 b의 범위를 정해줬기 때문에 다시 c의 범위를 줄 필요가 없음.
        if a*a + b*b == c*c and a < b < c: # 조건 
            print(a*b*c)



# 리스트 뒤집기(for문 이용)
# 코드를 입력하세요.
# 대칭인 인덱스끼리 바꿔줘야 함.

numbers = [2, 3, 5, 7, 11, 13, 17, 19]

for left in range(len(numbers)):
    right=len(numbers) - left - 1  # 이 부분이 핵심
    numbers[right],numbers[left] = numbers[left],numbers[right]
    

print("뒤집어진 리스트: " + str(numbers))
     








